name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write # For creating releases
  actions: read # For artifact downloads
  packages: write # For publishing container images

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Check version format
        run: |
          if [[ ! ${{ steps.version.outputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format. Expected: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

  build-ubuntu:
    needs: validate-version
    name: Build Linux
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-ubuntu-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --bin confluence-dl
      - name: Strip binary
        run: strip target/release/confluence-dl
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Compress binary
        run: |
          tar -czf confluence-dl-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz -C target/release confluence-dl
          shasum -a 256 confluence-dl-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz > confluence-dl-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: confluence-dl-linux
          path: |
            confluence-dl-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz
            confluence-dl-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256

  build-macos:
    needs: validate-version
    name: Build macOS
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-macos-latest-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --bin confluence-dl
      - name: Strip binary
        run: strip target/release/confluence-dl
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Compress binary
        run: |
          tar -czf confluence-dl-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz -C target/release confluence-dl
          shasum -a 256 confluence-dl-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz > confluence-dl-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: confluence-dl-macos
          path: |
            confluence-dl-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz
            confluence-dl-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256

  create-release:
    name: Create Release
    if: success()
    needs: [validate-version, build-ubuntu, build-macos, publish-container]
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history to get previous tags

      - name: Get version and previous tag
        id: version_info
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "PREVIOUS_TAG=${PREVIOUS_TAG#v}" >>$GITHUB_ENV

      - name: Download Linux artifact
        uses: actions/download-artifact@v5
        with:
          name: confluence-dl-linux
          path: ./

      - name: Download macOS artifact
        uses: actions/download-artifact@v5
        with:
          name: confluence-dl-macos
          path: ./

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Generate Release Notes
        run: |
          envsubst <.github/release-template.md >release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./confluence-dl-linux-x86_64-*.tar.gz
            ./confluence-dl-linux-x86_64-*.tar.gz.sha256
            ./confluence-dl-macos-x86_64-*.tar.gz
            ./confluence-dl-macos-x86_64-*.tar.gz.sha256
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false

  publish-container:
    name: Publish Container Image
    needs: validate-version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    env:
      REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/confluence-dl
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: x86_64-unknown-linux-musl

      - name: Install musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-musl-${{ hashFiles('**/Cargo.lock') }}
          target-dir: target

      - name: Build static binary
        env:
          RUSTFLAGS: "-C strip=symbols"
          CC_x86_64_unknown_linux_musl: musl-gcc
        run: cargo build --release --bin confluence-dl --target x86_64-unknown-linux-musl

      - name: Prepare artifacts
        id: artifacts
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/confluence-dl dist/confluence-dl
          chmod +x dist/confluence-dl
          SHA256=$(sha256sum dist/confluence-dl | awk '{print $1}')
          printf "%s  confluence-dl\n" "$SHA256" > dist/confluence-dl.sha256
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=confluence-dl
            org.opencontainers.image.description=CLI utility for exporting Confluence content to Markdown
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.licenses=MIT
            io.confluence-dl.binary.checksum=${{ steps.artifacts.outputs.sha256 }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BINARY_PATH=dist/confluence-dl
            CHECKSUM_PATH=dist/confluence-dl.sha256
